AWSTemplateFormatVersion: '2010-09-09'
Description: |
  This CloudFormation template creates resources for exporting CloudWatch logs
  from the `DataApiRequestLogs` log group to an S3 bucket in the **production** environment.
  The logs will be stored in the bucket 'data-api-requestlogs-backup-prod' and managed with lifecycle policies
  to move them to Glacier after 7 days and delete them after 28 days.

Resources:
  LogExportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: data-api-requestlogs-backup-prod
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 7
          - Id: ExpireLogs
            Status: Enabled
            ExpirationInDays: 28

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogExportBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: 
              - s3:PutObject
              - s3:GetBucketAcl
            Resource: 
              - !Sub "arn:aws:s3:::${LogExportBucket}/*"
              - !Sub "arn:aws:s3:::${LogExportBucket}"
            Condition:
              StringEquals:
                aws:SourceAccount: '507038060985'
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:logs:eu-west-1:507038060985:log-group:DataApiRequestLogs:*"

  LogExportLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DataApiRequestLogs-LogExport-Prod
      Runtime: python3.9
      Role: !GetAtt LogExportLambdaRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import time
          from datetime import datetime, timedelta

          def lambda_handler(event, context):
              print("Starting log export process")
              
              log_group = event.get('log_group_name') or os.environ['LOG_GROUP_NAME']
              destination_bucket = event.get('destination_bucket') or os.environ['DESTINATION_BUCKET']
              
              print(f"Log group: {log_group}")
              print(f"Destination bucket: {destination_bucket}")
              
              logs_client = boto3.client('logs')
              
              # Calculate time range for export (last 24 hours)
              end_time = int(time.time()) * 1000
              start_time = int((datetime.now() - timedelta(days=1)).timestamp()) * 1000
              
              print(f"Exporting logs from {datetime.fromtimestamp(start_time/1000)} to {datetime.fromtimestamp(end_time/1000)}")
              
              try:
                  # Create export task
                  response = logs_client.create_export_task(
                      logGroupName=log_group,
                      fromTime=start_time,
                      to=end_time,
                      destination=destination_bucket,
                      destinationPrefix=f'logs/{log_group}/{datetime.now().strftime("%Y-%m-%d")}'
                  )
                  
                  print(f"Export task created successfully with ID: {response['taskId']}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Export task created successfully',
                          'taskId': response['taskId']
                      })
                  }
              except Exception as e:
                  print(f"Error creating export task: {str(e)}")
                  raise
      Timeout: 300
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref LogExportBucket
          LOG_GROUP_NAME: DataApiRequestLogs
      Tags:
        - Key: Environment
          Value: prod

  LogExportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DataApiRequestLogs-LogExportRole-Prod
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LogExportPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateExportTask
                  - logs:DescribeExportTasks
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${LogExportBucket}/*"
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                Resource: !Sub "arn:aws:s3:::${LogExportBucket}"

  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DataApiRequestLogs-DailyExportRule-Prod
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LogExportLambda.Arn
          Id: LogExportToS3LambdaProd
          Input: !Sub '{"log_group_name": "DataApiRequestLogs", "destination_bucket": "${LogExportBucket}"}'

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LogExportLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchEventRule.Arn

Outputs:
  LambdaFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt LogExportLambda.Arn
  S3Bucket:
    Description: "S3 Bucket Name"
    Value: !Ref LogExportBucket
