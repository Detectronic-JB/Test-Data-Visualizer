AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template deploys a production CodePipeline with its required resources for a production environment, including App Runner and ECR access.

Parameters:
  Environment:
    Type: String
    Default: "Production"
  
  GitBranch:
    Type: String
    Default: "main"
  
  FullRepositoryId:
    Type: String
    Default: "prod-app-repo"

  CodeStarConnectionArn:
    Type: String
    Default: "arn:aws:codestar-connections:eu-west-1:507038060985:connection/your_prod_connection_arn"  # Update with production ARN

  EcrImageTag:
    Type: String
    Default: "latest"

  VPCId:
    Type: String
    Default: "vpc-0245ba2f2ade8956e"  # Update with your production VPC ID

  PrivateSubnet1:
    Type: String
    Default: "subnet-0f0c94bd7e0ca2978"  # Update with your production private subnet 1

  PrivateSubnet2:
    Type: String
    Default: "subnet-0cf361de1a4beb167"  # Update with your production private subnet 2

  RdsInstanceArn:
    Type: String
    Default: "arn:aws:rds:eu-west-1:507038060985:db:datavis-prod"

  RdsSecurityGroupId:
    Type: String
    Default: "sg-055d7189efc3e6fa9"

  SecretKeySecretArn:
    Type: String
    Default: "arn:aws:secretsmanager:eu-west-1:507038060985:secret:DataVisualizer/Secret-Prod"

Resources:
  # ECR Repository for Production
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref FullRepositoryId
      ImageScanningConfiguration:
        scanOnPush: true

  # S3 Bucket for Production Artifacts
  PipelineArtifactsBucketProd:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "data-visualizer-prod-pipeline-artifacts"
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref PipelineArtifactsLoggingBucketProd
        LogFilePrefix: "artifacts-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  PipelineArtifactsLoggingBucketProd:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "data-visualizer-prod-pipeline-logs"
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket Policy for Production Artifacts
  PipelineArtifactsBucketPolicyProd:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PipelineArtifactsBucketProd
      PolicyDocument:
        Statement:
          - Effect: Deny
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !Sub "${PipelineArtifactsBucketProd.Arn}/*"
              - !GetAtt PipelineArtifactsBucketProd.Arn
            Condition:
              Bool:
                aws:SecureTransport: false

  # IAM Role for CodeBuild in Production
  CodeBuildServiceRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "DataVisualizerProd-CodeBuildServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codebuild.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "DataVisualizerProd-CodeBuildAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action: 
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "*"
              - Effect: Allow
                Action: 
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecr:PutImage"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:InitiateLayerUpload"
                Resource: "*"

  # CodeBuild Project for Docker Image Build and Push
  CodeBuildProjectBuildAndPushProd:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: "DataVisualizerProd-CodeBuildBuildAndPush-v2"  # Renamed to avoid conflict
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true  # Required for Docker build
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FullRepositoryId}"
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .
                - docker tag $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION $REPOSITORY_URI:latest
            post_build:
              commands:
                - echo Pushing the Docker image...
                - docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
                - docker push $REPOSITORY_URI:latest
                - echo Build completed on `date`
          artifacts:
            files:
              - '**/*'
      ServiceRole: !GetAtt CodeBuildServiceRoleProd.Arn

  # App Runner VPC Connector for Production
  VPCConnectorProd:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      VpcConnectorName: "DataVisualizerProd-VpcConnector"
      Subnets:
        - !Ref PrivateSubnet1  # Ensure this is a valid private subnet
        - !Ref PrivateSubnet2  # Ensure this is a valid private subnet
      SecurityGroups:
        - !Ref RdsSecurityGroupId  # Ensure this security group allows necessary traffic

  # App Runner Service for Production
  AppRunnerServiceProd:
    Type: AWS::AppRunner::Service
    Properties:
      SourceConfiguration:
        ImageRepository:
          ImageIdentifier: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FullRepositoryId}:${EcrImageTag}"
          ImageConfiguration:
            Port: "8000"
          ImageRepositoryType: ECR
        AutoDeploymentsEnabled: true
      InstanceConfiguration:
        Cpu: "1024"
        Memory: "2048"
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !Ref VPCConnectorProd
      ServiceName: "DataVisualizerProdAppRunnerService"

  # CodePipeline IAM Role for Production
  CodePipelineServiceRoleProd:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "DataVisualiserProd-CodePipelineServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codepipeline.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "DataVisualiserProd-CodePipelineAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub "arn:aws:s3:::${PipelineArtifactsBucketProd}/*"
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"

  # CodePipeline for Production
  PipelineProd:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref PipelineArtifactsBucketProd
        Type: S3
      RoleArn: !GetAtt CodePipelineServiceRoleProd.Arn
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: SourceCodeRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Ref FullRepositoryId
                BranchName: !Ref GitBranch
              OutputArtifacts:
                - Name: SourceCodeAsZip
              RunOrder: 1
        
        - Name: BuildAndDeploy
          Actions:
            - Name: BuildContainerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceCodeAsZip
              Configuration:
                ProjectName: !Ref CodeBuildProjectBuildAndPushProd
              RunOrder: 1
            - Name: PrepareCloudFormation
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceCodeAsZip
              OutputArtifacts:
                - Name: AppRunnerCloudFormation
              Configuration:
                ProjectName: !Ref CodeBuildProjectBuildAndPushProd
              RunOrder: 2

        - Name: AppRunnerDeploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              InputArtifacts:
                - Name: AppRunnerCloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !GetAtt CodePipelineServiceRoleProd.Arn
                StackName: !Sub "${AWS::StackName}-AppRunnerService"
                TemplatePath: AppRunnerCloudFormation::template.yml
              RunOrder: 1
