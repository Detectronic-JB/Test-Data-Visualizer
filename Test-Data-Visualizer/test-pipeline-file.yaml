AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template deploys a testing CodePipeline with its required resources including VPC, Subnets, NAT Gateway, Security Groups, Route Tables, and App Runner.

  The following stages are predefined in this template:
  - Source
  - UpdatePipeline
  - BuildAndDeployTestStack

Parameters:
  Environment:
    Type: String
    Default: "Testing"
  TestGitBranch:
    Type: String
    Default: "main"
  FullRepositoryId:
    Type: String
    Default: "Detectronic/Data-Visualiser"
  CodeStarConnectionArn:
    Type: String
    Default: "arn:aws:codeconnections:eu-west-1:583261726886:connection/7fba6c00-7d2d-4878-8ac6-13f47013dfa7"
  EcrImageTag:
    Type: String
    Default: "latest"
  TestingRdsCredsSecretArn:
    Type: String
    Default: ""
  TestingSecretKeySecretArn:
    Type: String
    Default: ""
  TestingRdsUserArn:
    Type: String
    Default: ""
  TestingVpcCidr:
    Type: String
    Default: "172.31.0.0/16"

Resources:
  # VPC
  TestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref TestingVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Test-VPC

  # Internet Gateway
  TestInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test-Internet-Gateway

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestVpc
      InternetGatewayId: !Ref TestInternetGateway

  # Public Subnet
  TestPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      CidrBlock: "172.31.0.0/20"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Test-Public-Subnet

  # Private Subnet 1
  TestPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      CidrBlock: "172.31.16.0/20"
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Test-Private-Subnet-1

  # Private Subnet 2
  TestPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      CidrBlock: "172.31.32.0/20"
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Test-Private-Subnet-2

  # NAT Gateway and Elastic IP
  TestElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  TestNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt TestElasticIP.AllocationId
      SubnetId: !Ref TestPublicSubnet
      Tags:
        - Key: Name
          Value: Test-NAT-Gateway

  # Public Route Table and Association
  TestPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc
      Tags:
        - Key: Name
          Value: Test-Public-Route-Table

  TestPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref TestPublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref TestInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TestPublicSubnet
      RouteTableId: !Ref TestPublicRouteTable

  # Private Route Table and Association
  TestPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc
      Tags:
        - Key: Name
          Value: Test-Private-Route-Table

  TestPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TestPrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref TestNATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TestPrivateSubnet1
      RouteTableId: !Ref TestPrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TestPrivateSubnet2
      RouteTableId: !Ref TestPrivateRouteTable

  # Security Group for App Runner
  TestAppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow App Runner access'
      VpcId: !Ref TestVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: Test-AppRunner-SecurityGroup

  # App Runner VPC Connector
  TestAppRunnerVpcConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      Subnets:
        - !Ref TestPrivateSubnet1
        - !Ref TestPrivateSubnet2
      SecurityGroups:
        - !Ref TestAppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: Test-AppRunner-VPCConnector

  # App Runner Service
  TestAppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: 'Test-AppRunnerService'
      SourceConfiguration:
        ImageRepository:
          ImageIdentifier: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-app-repo:${EcrImageTag}"
          ImageRepositoryType: ECR
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt TestAppRunnerAccessRole.Arn
      InstanceConfiguration:
        Cpu: '1 vCPU'
        Memory: '2 GB'
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !Ref TestAppRunnerVpcConnector
      Tags:
        - Key: Name
          Value: Test-AppRunner-Service

  # IAM Role for App Runner and CodeBuild
  TestAppRunnerAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apprunner.amazonaws.com
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AppRunnerAndCodeBuildAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: '*'
      Tags:
        - Key: Name
          Value: 'Test-AppRunner-Role'

  # S3 Bucket for Pipeline Artifacts
  TestPipelineArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "test-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private

  # CodeBuild Project
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: "Test-Build-Project"
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:5.0"
      ServiceRole: !GetAtt TestAppRunnerAccessRole.Arn

  # CodePipeline for Testing
  TestPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: 'Test-Pipeline'
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/Test-Pipeline-Role"
      ArtifactStore:
        Type: S3
        Location: !Ref TestPipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Ref FullRepositoryId
                BranchName: !Ref TestGitBranch
              RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/Test-Pipeline-Role"
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref BuildProject
              RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/Test-Pipeline-Role"

Outputs:
  VPCId:
    Description: 'Test VPC ID'
    Value: !Ref TestVpc
  AppRunnerServiceURL:
    Description: 'App Runner Service URL'
    Value: !GetAtt TestAppRunnerService.ServiceUrl
  PipelineName:
    Description: 'Test Pipeline Name'
    Value: !Ref TestPipeline
