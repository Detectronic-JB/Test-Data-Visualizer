AWSTemplateFormatVersion: '2010-09-09'
Description: Detectronic Test Visualizer CloudFormation template including VPC, Subnets, NAT Gateway, App Runner Service, Security Group, and Testing Pipeline

Parameters:
  CodeStarConnectionArn:
    Type: String
    Description: ARN for the CodeStar Connection to GitHub
    Default: arn:aws:codestar-connections:eu-west-1:583261726886:connection/7fba6c00-7d2d-4878-8ac6-13f47013dfa7
  EcrImageTag:
    Type: String
    Description: ECR Image Tag to deploy from
    Default: latest

Resources:
  # VPC for Detectronic Test Visualizer
  TestVisualizerVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.31.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-VPC'

  # Internet Gateway for VPC
  TestVisualizerInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-InternetGateway'

  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref TestVisualizerVPC
      InternetGatewayId: !Ref TestVisualizerInternetGateway

  # Public Subnet for VPC
  TestVisualizerPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref TestVisualizerVPC
      CidrBlock: '172.31.0.0/20'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-Public-Subnet'

  # Private Subnet 1
  TestVisualizerPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref TestVisualizerVPC
      CidrBlock: '172.31.16.0/20'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-Private-Subnet-1'

  # Private Subnet 2
  TestVisualizerPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref TestVisualizerVPC
      CidrBlock: '172.31.32.0/20'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-Private-Subnet-2'

  # NAT Gateway and Elastic IP
  TestVisualizerElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  TestVisualizerNATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt TestVisualizerElasticIP.AllocationId
      SubnetId: !Ref TestVisualizerPublicSubnet
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-NATGateway'

  # Public Route Table and Association
  TestVisualizerPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref TestVisualizerVPC
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-Public-Route-Table'

  TestVisualizerPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref TestVisualizerPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref TestVisualizerInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref TestVisualizerPublicSubnet
      RouteTableId: !Ref TestVisualizerPublicRouteTable

  # Private Route Table and Association
  TestVisualizerPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref TestVisualizerVPC
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-Private-Route-Table'

  TestVisualizerPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref TestVisualizerPrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref TestVisualizerNATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref TestVisualizerPrivateSubnet1
      RouteTableId: !Ref TestVisualizerPrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref TestVisualizerPrivateSubnet2
      RouteTableId: !Ref TestVisualizerPrivateRouteTable

  # Security Group for App Runner
  TestVisualizerAppRunnerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow App Runner access'
      VpcId: !Ref TestVisualizerVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-AppRunner-SecurityGroup'

  # App Runner VPC Connector
  TestVisualizerAppRunnerVpcConnector:
    Type: 'AWS::AppRunner::VpcConnector'
    Properties:
      Subnets:
        - !Ref TestVisualizerPrivateSubnet1
        - !Ref TestVisualizerPrivateSubnet2
      SecurityGroups:
        - !Ref TestVisualizerAppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-AppRunner-VPCConnector'

  # App Runner Service
  TestVisualizerAppRunnerService:
    Type: 'AWS::AppRunner::Service'
    Properties:
      ServiceName: 'Detectronic-Test-Visualizer-AppRunnerService'
      SourceConfiguration:
        ImageRepository:
          ImageIdentifier: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-app-repo:${EcrImageTag}"
          ImageRepositoryType: ECR
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt TestVisualizerAppRunnerAccessRole.Arn
      InstanceConfiguration:
        Cpu: '1 vCPU'
        Memory: '2 GB'
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !Ref TestVisualizerAppRunnerVpcConnector
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-AppRunnerService'

  # IAM Role for App Runner
  TestVisualizerAppRunnerAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apprunner.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AppRunnerECRAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'
      Tags:
        - Key: Name
          Value: 'Detectronic-Test-Visualizer-AppRunner-Role'

  # S3 Bucket for Pipeline Artifacts
  TestVisualizerPipelineArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "detectronic-test-visualizer-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private

  # CodePipeline for Testing
  TestVisualizerPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: 'Detectronic-Test-Visualizer-Pipeline'
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/Detectronic-Test-Pipeline-Role"
      ArtifactStore:
        Type: S3
        Location: !Ref TestVisualizerPipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: "Detectronic-JB/Test-Data-Visualizer"
                BranchName: "main"
              RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/Detectronic-Test-Pipeline-Role"
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref BuildProject
              RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/Detectronic-Test-Pipeline-Role"

Outputs:
  VPCId:
    Description: 'Detectronic Test Visualizer VPC ID'
    Value: !Ref TestVisualizerVPC
  AppRunnerServiceURL:
    Description: 'App Runner Service URL'
    Value: !GetAtt TestVisualizerAppRunnerService.ServiceUrl
  PipelineName:
    Description: 'Detectronic Test Visualizer Pipeline Name'
    Value: !Ref TestVisualizerPipeline
